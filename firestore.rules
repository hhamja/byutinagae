rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		// ---------------------------------------------------------
		// Rowy rules start
		// ---------------------------------------------------------
		// Automatically generated and managed by Rowy
		// ⚠️ Do not edit this block directly, as it will be overwritten
		// To edit the security rules, please do it on different block or manage from rowy settings
		// initialized on 5/11/2023
		match /{collectionId}/{docId} {
			allow read: if colRule(["product","ingredient"], ["ADMIN","EDITOR","VIEWER","OWNER"]);
			allow create, update, delete: if colRule(["product"], ["ADMIN","EDITOR","VIEWER","OWNER"]);
			allow create, update, delete: if colRule(["ingredient"], ["ADMIN","OWNER"]);
			
			match /{subTableCollectionID}/{document=**}{
				allow read, create, update, delete: if colRule(["product"], ["ADMIN","EDITOR","VIEWER","OWNER"]);
				
			}
			function colRule(collections, roles){
				return collectionId in collections && hasAnyRole(roles);
			}
			
		}
		// ---------------------------------------------------------
		// Rowy rules end
		// ---------------------------------------------------------
		// Allow admins to read and write all documents
		match /{document=**} {
			allow read, write;
		}
		
		// Rowy: Allow signed in users to read Rowy configuration and admins to write
		match /_rowy_/{docId} {
			allow read: if request.auth.token.roles.size() > 0;
			allow write: if hasAnyRole(["ADMIN", "OWNER"]);
			match /{document=**} {
				allow read: if request.auth.token.roles.size() > 0;
				allow write: if hasAnyRole(["ADMIN", "OWNER"]);
			}
		}
		// Rowy: Allow users to edit their settings
		match /_rowy_/userManagement/users/{userId} {
			allow get, update, delete: if isDocOwner(userId);
			allow create: if request.auth.token.roles.size() > 0;
		}
		// Rowy: Allow public to read public Rowy configuration
		match /_rowy_/publicSettings {
			allow get: if true;
		}
		
		// Rowy: Utility functions
		function isDocOwner(docId) {
			return request.auth != null && (request.auth.uid == resource.id || request.auth.uid == docId);
		}
		function hasAnyRole(roles) {
			return request.auth != null && request.auth.token.roles.hasAny(roles);
		}
	}
}